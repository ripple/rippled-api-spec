components:
  schemas:
    SubmitRequestV1:
      oneOf:
        - $ref: '#/components/schemas/SubmitOnlyMode'
        - $ref: '#/components/schemas/SignAndSubmitModeV1'

    SubmitRequestV2:
      oneOf:
        - $ref: '#/components/schemas/SubmitOnlyMode'
        - $ref: '#/components/schemas/SignAndSubmitModeV2'

    SubmitOnlyMode:
      description: A submit-only request for submitting transactions.
      type: object
      properties:
        tx_blob:
          type: string
          description: Hex representation of the signed transaction to submit. Can be a multi-signed transaction.
        fail_hard:
          type: boolean
          description: 'If true, and the transaction fails locally, do not retry or relay the transaction to other servers. Default is false.'
      required:
        - tx_blob

    SignAndSubmitModeBase:
      description: A mode for signing a transaction and immediately submitting it. This mode is intended for testing.
      type: object
      properties:
        secret:
          type: string
          description: '(Optional) Secret key of the account supplying the transaction, used to sign it. Do not send your secret to untrusted servers or through unsecured network connections. Cannot be used with key_type, seed, seed_hex, or passphrase.'
        seed:
          type: string
          description: "(Optional) Secret key of the account supplying the transaction, used to sign it. Must be in the XRP Ledger's base58 format. If provided, you must also specify the key_type. Cannot be used with secret, seed_hex, or passphrase."
        seed_hex:
          type: string
          description: '(Optional) Secret key of the account supplying the transaction, used to sign it. Must be in hexadecimal format. If provided, you must also specify the key_type. Cannot be used with secret, seed, or passphrase.'
        passphrase:
          type: string
          description: '(Optional) Secret key of the account supplying the transaction, used to sign it, as a string passphrase. If provided, you must also specify the key_type. Cannot be used with secret, seed, or seed_hex.'
        key_type:
          type: string
          description: '(Optional) Type of cryptographic key provided in this request. Valid types are secp256k1 or ed25519. Defaults to secp256k1. Cannot be used with secret. Caution: Ed25519 support is experimental.'
        fail_hard:
          type: boolean
          description: '(Optional) If true, and the transaction fails locally, do not retry or relay the transaction to other servers. Default is false. Updated in: rippled 1.5.0'
        offline:
          type: boolean
          description: '(Optional) If true, when constructing the transaction, do not try to automatically fill in or validate values. Default is false.'
        build_path:
          type: boolean
          description: '(Optional) If this field is provided, the server auto-fills the Paths field of a Payment transaction before signing. Omit this field if the transaction is a direct XRP payment or if it is not a Payment-type transaction. Caution: The server looks for the presence or absence of this field, not its value. This behavior may change. (Issue #3272)'
        fee_mult_max:
          type: integer
          description: '(Optional) Sign-and-submit fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost x fee_mult_max รท fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. Default is 10.'
        fee_div_max:
          type: integer
          description: '(Optional) Sign-and-submit fails with the error rpcHIGH_FEE if the auto-filled Fee value would be greater than the reference transaction cost x fee_mult_max รท fee_div_max. This field has no effect if you explicitly specify the Fee field of the transaction. Default is 1.'

    SignAndSubmitModeV1:
      type: object
      allOf:
        - $ref: '#/components/schemas/SignAndSubmitModeBase'
      properties:
        tx_json:
          type: object
          discriminator:
            propertyName: TransactionType
            mapping:
              Payment: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV1'
          oneOf:
            - $ref: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV1'
            # TODO: Add other transaction types here

          description: 'Transaction definition in JSON format, optionally omitting any auto-fillable fields.'
      required:
        - tx_json

    SignAndSubmitModeV2:
      type: object
      allOf:
        - $ref: '#/components/schemas/SignAndSubmitModeBase'
      properties:
        tx_json:
          type: object
          discriminator:
            propertyName: TransactionType
            mapping:
              Payment: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV2'
          oneOf:
            - $ref: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV2'
            # TODO: Add other transaction types here
          description: 'Transaction definition in JSON format, optionally omitting any auto-fillable fields.'
      required:
        - tx_json

    SubmitSuccessResponseBase:
      allOf:
        - $ref: '../base.yaml#/components/schemas/BaseSuccessResponse'
        - type: object
          properties:
            engine_result:
              type: string
              description: Text result code indicating the preliminary result of the transaction, for example tesSUCCESS
            engine_result_code:
              type: integer
              description: Numeric version of the result code. Not recommended.
            engine_result_message:
              type: string
              description: Human-readable explanation of the transaction's preliminary result
            tx_blob:
              type: string
              description: The complete transaction in hex string format
            accepted:
              type: boolean
              description: |
                (Omitted in sign-and-submit mode) The value true indicates that the transaction was applied, queued, broadcast, or kept for later.
                The value false indicates that none of those happened, so the transaction cannot possibly succeed as long as you do not submit it again and have not already submitted it another time.
            account_sequence_available:
              type: number
              description: |
                (Omitted in sign-and-submit mode) The next Sequence Number available for the sending account after all pending and queued transactions.
            account_sequence_next:
              type: number
              description: |
                (Omitted in sign-and-submit mode) The next Sequence Number for the sending account after all transactions that have been provisionally applied, but not transactions in the queue.
            applied:
              type: boolean
              description: |
                (Omitted in sign-and-submit mode) The value true indicates that this transaction was applied to the open ledger.
                In this case, the transaction is likely, but not guaranteed, to be validated in the next ledger version.
            broadcast:
              type: boolean
              description: |
                (Omitted in sign-and-submit mode) The value true indicates this transaction was broadcast to peer servers in the peer-to-peer XRP Ledger network.
                (Note: if the server has no peers, such as in stand-alone mode, the server uses the value true for cases where it would have broadcast the transaction.)
                The value false indicates the transaction was not broadcast to any other servers.
            kept:
              type: boolean
              description: |
                (Omitted in sign-and-submit mode) The value true indicates that the transaction was kept to be retried later.
            queued:
              type: boolean
              description: |
                (Omitted in sign-and-submit mode) The value true indicates the transaction was put in the Transaction Queue, which means it is likely to be included in a future ledger version.
            open_ledger_cost:
              type: string
              description: |
                (Omitted in sign-and-submit mode) The current open ledger cost before processing this transaction.
                Transactions with a lower cost are likely to be queued.
            validated_ledger_index:
              type: integer
              description: |
                (Omitted in sign-and-submit mode) The ledger index of the newest validated ledger at the time of submission.
                This provides a lower bound on the ledger versions that the transaction can appear in as a result of this request.
                (The transaction could only have been validated in this ledger version or earlier if it had already been submitted before.)

    SubmitSuccessResponseV1:
      type: object
      allOf:
        - $ref: '#/components/schemas/SubmitSuccessResponseBase'
      properties:
        tx_json:
          discriminator:
            propertyName: TransactionType
            mapping:
              Payment: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV1'
              # TODO: Add other transaction types here
          oneOf:
            - $ref: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV1'
            # TODO: Add other transaction types here

    SubmitSuccessResponseV2:
      type: object
      allOf:
        - $ref: '#/components/schemas/SubmitSuccessResponseBase'
      properties:
        tx_json:
          discriminator:
            propertyName: TransactionType
            mapping:
              Payment: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV2'
              # TODO: Add other transaction types here
          oneOf:
            - $ref: '../transactions/payment.yaml#/components/schemas/PaymentTransactionV2'
            # TODO: Add other transaction types here

    SubmitErrorResponse:
      type: object
      properties:
        error:
          type: string
          oneOf:
            - $ref: '../base.yaml#/components/schemas/UniversalErrorResponseCodes'
            - enum:
                - amendmentBlocked
                - highFee
                - internalJson
                - internalSubmit
                - internalTransaction
                - invalidParams
                - invalidTransaction
                - noPath
                - tooBusy
                - notSupported
          description: >
            * `amendmentBlocked` - The transaction cannot be submitted to the network because the rippled server is amendment blocked.
            * `highFee` - The fee_mult_max parameter was specified, but the server's current fee multiplier exceeds the specified one. (Sign-and-Submit mode only)
            * `internalJson` - An internal error occurred when serializing the transaction to JSON. This could be caused by many aspects of the transaction, including a bad signature or some fields being malformed.
            * `internalSubmit` - An internal error occurred when submitting the transaction. This could be caused by many aspects of the transaction, including a bad signature or some fields being malformed.
            * `internalTransaction` - An internal error occurred when processing the transaction. This could be caused by many aspects of the transaction, including a bad signature or some fields being malformed.
            * `invalidParams` - One or more fields are specified incorrectly, or one or more required fields are missing.
            * `invalidTransaction` - The transaction is malformed or otherwise invalid.
            * `noPath` - The transaction did not include paths, and the server was unable to find a path by which this payment can occur. (Sign-and-Submit mode only)
            * `tooBusy` - The transaction did not include paths, but the server is too busy to do pathfinding right now. Does not occur if you are connected as an admin. (Sign-and-Submit mode only)
            * `notSupported` - Signing is not supported by this server (Sign-and-Submit mode only.) If you are the server admin, you can still access signing when connected as an admin, or you could enable public signing.
        status:
          type: string
          enum:
            - error
        request:
          oneOf:
            - $ref: '#/components/schemas/SubmitRequestV1'
            - $ref: '#/components/schemas/SubmitRequestV2'

      required:
        - status
        - error
        - request
