components:
  schemas:
    BookOffersRequest:
      description: >
        The book_offers method retrieves a list of Offers between two currencies, also known as an order book. 
        The response omits unfunded Offers and reports how much of each remaining Offer's total is currently funded.
      type: object
      allOf:
        - $ref: '../base.yaml#/components/schemas/BaseRequest'
        - $ref: '../base.yaml#/components/schemas/LookupByLedgerRequest'
        - type: object
          properties:
            taker_gets:
              $ref: '../base.yaml#/components/schemas/Currency'
              description: |
                The asset the account taking the Offer would receive, as a currency without an amount.
            taker_pays:
              $ref: '../base.yaml#/components/schemas/Currency'
              description: |
                The asset the account taking the Offer would pay, as a currency without an amount.
            limit:
              type: integer
              description: |
                The maximum number of Offers to return. The response may include fewer results.
            taker:
              type: string
              description: |
                The Address of an account to use as a perspective.
                The response includes this account's Offers even if they are unfunded. (You can use this to see what Offers are above or below yours in the order book.)
              x-custom-validation:
                isAccount: true

    BookOffersSuccessResponse:
      type: object
      properties:
        offers:
          type: array
          description: |
            Array of offer objects, each of which has the fields of an Offer object
          items:
            $ref: '#/components/schemas/Offer'
        ledger_current_index:
          type: integer
          description: |
            (Omitted if ledger_current_index is provided) The ledger index of the current in-progress ledger version, which was used to retrieve this information.
        ledger_hash:
          type: string
          description: (May be omitted) The identifying hash of the ledger version that was used when retrieving this data, as requested.
        ledger_index:
          type: integer
          description: (Omitted if ledger_current_index provided) The ledger index of the ledger version that was used when retrieving this data, as requested.
        validated:
          type: boolean
          description: |
            (May be omitted) If true, the information comes from a validated ledger version.

    Offer:
      type: object
      properties:
        owner_funds:
          type: string
          description: |
            Amount of the TakerGets currency the side placing the offer has available to be traded. 
            (XRP is represented as drops; any other currency is represented as a decimal value.) 
            If a trader has multiple offers in the same book, only the highest-ranked offer includes this field.
          x-custom-validation:
            isNumericString: true
        taker_gets_funded:
          description: |
            (Only included in partially-funded offers) The maximum amount of currency that the taker can get, given the funding status of the offer.
          oneOf:
            - type: string
              description: 'The amount of XRP (drops), represented as a string.'
              x-custom-validation:
                isNumericString: true
            - $ref: '../base.yaml#/components/schemas/TokenAmount'
        taker_pays_funded:
          description: |
            (Only included in partially-funded offers) The maximum amount of currency that the taker would pay, given the funding status of the offer.
          oneOf:
            - type: string
              description: 'The amount of XRP (drops), represented as a string.'
              x-custom-validation:
                isNumericString: true
            - $ref: '../base.yaml#/components/schemas/TokenAmount'
        quality:
          type: string
          description: |
            The exchange rate, as the ratio taker_pays divided by taker_gets. 
            For fairness, offers that have the same quality are automatically taken first-in, first-out.
            (In other words, if multiple people offer to exchange currency at the same rate, the oldest offer is taken first.)

    BookOffersErrorResponse:
      type: object
      properties:
        error:
          type: string
          oneOf:
            - $ref: '../base.yaml#/components/schemas/UniversalErrorResponseCodes'
            - enum:
                - invalidParams
                - lgrNotFound
                - srcCurMalformed
                - dstAmtMalformed
                - srcIsrMalformed
                - dstIsrMalformed
                - badMarket
          description: >
            * `invalidParams` - One or more fields are specified incorrectly, or one or more required fields are missing.
            * `lgrNotFound` - The ledger specified by the ledger_hash or ledger_index does not exist, or it does exist but the server does not have it.
            * `srcCurMalformed` - The taker_pays field in the request is not formatted properly.
            * `dstAmtMalformed` - The taker_gets field in the request is not formatted properly.
            * `srcIsrMalformed` - The issuer field of the taker_pays field in the request is not valid.
            * `dstIsrMalformed` - The issuer field of the taker_gets field in the request is not valid.
            * `badMarket` - The desired order book does not exist; for example, offers to exchange a currency for itself.
        status:
          type: string
          enum:
            - error
        request:
          $ref: '#/components/schemas/BookOffersRequest'
      required:
        - status
        - error
        - request
