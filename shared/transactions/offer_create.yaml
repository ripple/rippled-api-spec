components:
  schemas:
    OfferCreateTransaction:
      $id: OfferCreateTransaction
      allOf:
        - $ref: '../base.yaml#/components/schemas/BaseTransaction'
      type: object
      description: |
        An OfferCreate transaction places an Offer in the decentralized exchange.
      required:
        - TakerGets
        - TakerPays
      properties:
        Expiration:
          type: integer
          format: uint32
          description: |
            (Optional) Time after which the Offer is no longer active, in seconds since the Ripple Epoch.
        OfferSequence:
          type: integer
          format: uint32
          description: |
            (Optional) An Offer to delete first, specified in the same way as OfferCancel.
        TakerGets:
          $ref: '../base.yaml#/components/schemas/CurrencyAmount'
          description: |
            The amount and type of currency being sold.
        TakerPays:
          $ref: '../base.yaml#/components/schemas/CurrencyAmount'
          description: |
            The amount and type of currency being bought.
        Flags:
          $ref: '#/components/schemas/OfferCreateFlag'
      x-generate-enum-in-model:
        - OfferCreateFlag

    OfferCreateFlag:
      type: integer
      format: uint32
      description: Enum for OfferCreate Transaction Flags.
      enum:
        - 0x00010000
        - 0x00020000
        - 0x00040000
        - 0x00080000
      x-enum-varnames:
        - tfPassive
        - tfImmediateOrCancel
        - tfFillOrKill
        - tfSell
      x-enum-descriptions:
        - If enabled, the Offer does not consume Offers that exactly match it, and instead becomes an Offer object in the ledger. It still consumes Offers that cross it.
        - 'Treat the Offer as an Immediate or Cancel order. The Offer never creates an Offer object in the ledger: it only trades as much as it can by consuming existing Offers at the time the transaction is processed. If no Offers match, it executes "successfully" without trading anything. In this case, the transaction still uses the result code tesSUCCESS.'
        - Treat the offer as a Fill or Kill order. The Offer never creates an Offer object in the ledger, and is canceled if it cannot be fully filled at the time of execution. By default, this means that the owner must receive the full TakerPays amount; if the tfSell flag is enabled, the owner must be able to spend the entire TakerGets amount instead.
        - Exchange the entire TakerGets amount, even if it means obtaining more than the TakerPays amount in exchange.
      x-generate-hex: true
      x-generate-flag-interface: true

    OfferCreateErrorCode:
      $id: OfferCreateErrorCode
      type: integer
      format: uint32
      description: Error codes for the OfferCreate transaction.
      enum:
        - -276
        - 148
        - 150
        - -296
        - -283
        - -292
        - -275
        - -297
        - -294
        - 133
        - 137
        - 103
        - 135
        - 134
        - 123
        - 121
      x-enum-varnames:
        - temINVALID_FLAG
        - tecEXPIRED
        - tecKILLED
        - temBAD_EXPIRATION
        - temBAD_SEQUENCE
        - temBAD_OFFER
        - temREDUNDANT
        - temBAD_CURRENCY
        - temBAD_ISSUER
        - tecNO_ISSUER
        - tecFROZEN
        - tecUNFUNDED_OFFER
        - tecNO_LINE
        - tecNO_AUTH
        - tecINSUF_RESERVE_OFFER
        - tecDIR_FULL
      x-enum-descriptions:
        - Occurs if the transaction specifies both tfImmediateOrCancel and tfFillOrKill.
        - Occurs if the transaction specifies an Expiration time that has already passed.
        - Occurs if the transaction specifies tfFillOrKill, and the full amount cannot be filled. If the ImmediateOfferKilled amendment is enabled, this result code also occurs when the transaction specifies tfImmediateOrCancel and executes without moving funds (previously, this would return tesSUCCESS).
        - Occurs if the transaction contains an Expiration field that is not validly formatted.
        - Occurs if the transaction contains an OfferSequence that is not validly formatted, or is higher than the transaction's own Sequence number.
        - Occurs if the Offer tries to trade XRP for XRP, or tries to trade an invalid or negative amount of a token.
        - Occurs if the transaction specifies a token for the same token (same issuer and currency code).
        - Occurs if the transaction specifies a token with the currency code "XRP".
        - Occurs if the transaction specifies a token with an invalid issuer value.
        - Occurs if the transaction specifies a token whose issuer value is not a funded account in the ledger.
        - Occurs if the transaction involves a token on a frozen trust line (including local and global freezes).
        - 'Occurs if the owner does not hold a positive amount of the TakerGets currency. (Exception: if TakerGets specifies a token that the owner issues, the transaction can succeed.)'
        - Occurs if the transaction involves a token whose issuer uses Authorized Trust Lines and the necessary trust line does not exist.
        - Occurs if the transaction involves a token whose issuer uses Authorized Trust Lines and the trust line that would receive the tokens exists but has not been authorized.
        - Occurs if the owner does not have enough XRP to meet the reserve requirement of adding a new Offer object to the ledger, and the transaction did not convert any currency. (If the transaction successfully traded any amount, the transaction succeeds with the result code tesSUCCESS, but does not create an Offer object in the ledger for the rest.)
        - Occurs if the owner owns too many items in the ledger, or the order book contains too many Offers at the same exchange rate already.
